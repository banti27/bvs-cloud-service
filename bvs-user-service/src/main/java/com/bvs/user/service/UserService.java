package com.bvs.user.service;

import java.util.List;
import java.util.stream.Collectors;

import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.bvs.user.dto.CreateUserRequest;
import com.bvs.user.dto.UserDTO;
import com.bvs.user.entity.User;
import com.bvs.user.entity.UserStatus;
import com.bvs.user.exception.InvalidPasswordException;
import com.bvs.user.exception.InvalidStatusTransitionException;
import com.bvs.user.exception.UserAlreadyExistsException;
import com.bvs.user.exception.UserNotFoundException;
import com.bvs.user.repository.UserRepository;

import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class UserService {

    private final UserRepository userRepository;
    private final PasswordEncoder passwordEncoder;

    /**
     * Create a new user
     * Note: User ID is automatically generated by the system in @PrePersist
     * and cannot be overridden by client input for security reasons
     */
    @Transactional
    public UserDTO createUser(CreateUserRequest request) {
        // Check if username or email already exists
        if (userRepository.existsByUsername(request.getUsername())) {
            throw new UserAlreadyExistsException("username", request.getUsername());
        }
        if (userRepository.existsByEmail(request.getEmail())) {
            throw new UserAlreadyExistsException("email", request.getEmail());
        }

        User user = new User();
        // ID is NOT set here - it will be auto-generated by @PrePersist
        user.setUsername(request.getUsername());
        user.setEmail(request.getEmail());
        user.setPassword(passwordEncoder.encode(request.getPassword())); // Hash password with BCrypt
        user.setFirstName(request.getFirstName());
        user.setLastName(request.getLastName());
        user.setStatus(UserStatus.ACTIVE); // Set initial status as ACTIVE

        User savedUser = userRepository.save(user);
        return convertToDTO(savedUser);
    }

    /**
     * Get user by ID
     */
    public UserDTO getUserById(String id) {
        User user = userRepository.findById(id)
                .orElseThrow(() -> new UserNotFoundException("id", id));
        return convertToDTO(user);
    }

    /**
     * Get user by username
     */
    public UserDTO getUserByUsername(String username) {
        User user = userRepository.findByUsername(username)
                .orElseThrow(() -> new UserNotFoundException("username", username));
        return convertToDTO(user);
    }

    /**
     * Get all users
     */
    public List<UserDTO> getAllUsers() {
        return userRepository.findAll().stream()
                .map(this::convertToDTO)
                .collect(Collectors.toList());
    }

    /**
     * Get all active users
     */
    public List<UserDTO> getActiveUsers() {
        return userRepository.findByStatus(UserStatus.ACTIVE).stream()
                .map(this::convertToDTO)
                .collect(Collectors.toList());
    }

    /**
     * Get users by status
     */
    public List<UserDTO> getUsersByStatus(UserStatus status) {
        return userRepository.findByStatus(status).stream()
                .map(this::convertToDTO)
                .collect(Collectors.toList());
    }

    /**
     * Update user
     */
    @Transactional
    public UserDTO updateUser(String id, CreateUserRequest request) {
        User user = userRepository.findById(id)
                .orElseThrow(() -> new UserNotFoundException("id", id));

        // Check if new username/email conflicts with other users
        if (!user.getUsername().equals(request.getUsername())
                && userRepository.existsByUsername(request.getUsername())) {
            throw new UserAlreadyExistsException("username", request.getUsername());
        }
        if (!user.getEmail().equals(request.getEmail())
                && userRepository.existsByEmail(request.getEmail())) {
            throw new UserAlreadyExistsException("email", request.getEmail());
        }

        user.setUsername(request.getUsername());
        user.setEmail(request.getEmail());
        user.setFirstName(request.getFirstName());
        user.setLastName(request.getLastName());

        // Only update password if provided and different
        if (request.getPassword() != null && !request.getPassword().isEmpty()) {
            user.setPassword(passwordEncoder.encode(request.getPassword()));
        }

        User updatedUser = userRepository.save(user);
        return convertToDTO(updatedUser);
    }

    /**
     * Delete user (soft delete)
     * Marks user as DELETED without removing from database
     */
    @Transactional
    public void deleteUser(String id) {
        User user = userRepository.findById(id)
                .orElseThrow(() -> new UserNotFoundException("id", id));
        user.setStatus(UserStatus.DELETED); // Soft delete - mark as DELETED
        userRepository.save(user);
    }

    /**
     * Deactivate user
     * Marks user as INACTIVE (can be reactivated)
     */
    @Transactional
    public void deactivateUser(String id) {
        User user = userRepository.findById(id)
                .orElseThrow(() -> new UserNotFoundException("id", id));
        user.setStatus(UserStatus.INACTIVE);
        userRepository.save(user);
    }

    /**
     * Reactivate user
     * Changes status back to ACTIVE
     */
    @Transactional
    public void reactivateUser(String id) {
        User user = userRepository.findById(id)
                .orElseThrow(() -> new UserNotFoundException("id", id));

        if (user.getStatus() == UserStatus.DELETED) {
            throw new InvalidStatusTransitionException("Cannot reactivate deleted user");
        }

        user.setStatus(UserStatus.ACTIVE);
        userRepository.save(user);
    }

    /**
     * Suspend user
     * Marks user as SUSPENDED (requires admin to reactivate)
     */
    @Transactional
    public void suspendUser(String id) {
        User user = userRepository.findById(id)
                .orElseThrow(() -> new UserNotFoundException("id", id));
        user.setStatus(UserStatus.SUSPENDED);
        userRepository.save(user);
    }

    /**
     * Lock user account
     * Typically used for security reasons (e.g., failed login attempts)
     */
    @Transactional
    public void lockUser(String id) {
        User user = userRepository.findById(id)
                .orElseThrow(() -> new UserNotFoundException("id", id));
        user.setStatus(UserStatus.LOCKED);
        userRepository.save(user);
    }

    /**
     * Update user status
     */
    @Transactional
    public void updateUserStatus(String id, UserStatus newStatus) {
        User user = userRepository.findById(id)
                .orElseThrow(() -> new UserNotFoundException("id", id));
        user.setStatus(newStatus);
        userRepository.save(user);
    }

    /**
     * Verify user password
     * Useful for login authentication
     */
    public boolean verifyPassword(String username, String rawPassword) {
        User user = userRepository.findByUsername(username)
                .orElseThrow(() -> new UserNotFoundException("username", username));
        return passwordEncoder.matches(rawPassword, user.getPassword());
    }

    /**
     * Change user password
     */
    @Transactional
    public void changePassword(String id, String oldPassword, String newPassword) {
        User user = userRepository.findById(id)
                .orElseThrow(() -> new UserNotFoundException("id", id));

        // Verify old password
        if (!passwordEncoder.matches(oldPassword, user.getPassword())) {
            throw new InvalidPasswordException("Invalid old password");
        }

        // Set new password
        user.setPassword(passwordEncoder.encode(newPassword));
        userRepository.save(user);
    }

    /**
     * Convert User entity to UserDTO
     */
    private UserDTO convertToDTO(User user) {
        return new UserDTO(
                user.getId(),
                user.getUsername(),
                user.getEmail(),
                user.getFirstName(),
                user.getLastName(),
                user.getStatus());
    }
}
